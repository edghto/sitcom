#!/usr/bin/env perl6

use v6;
use JSON::Tiny;

class Config {
	has $!fileName = ".config";
	has %.sitcoms is rw;


	method load {
		self.sitcoms = from-json(slurp $!fileName);
	}

	method save {
		my $fh = open $!fileName, :w;
		$fh.say(to-json(self.sitcoms));
		$fh.close;
	}
}

sub parseFile($fileName!) {
	my %episodes;
	my @lines = (open $fileName).lines;
	while @lines {
		my $elem = @lines.shift;
		if $elem ~~ m/S(\d+)\,\s+Ep(\d+)/ {
			my $ep = $1;
			while @lines {
				$elem = @lines.shift;
				if $elem ~~ m/\d+ \s+ \w+\. \s+ \d\d\d\d/ {
					%episodes{$ep} = Str($/);
					last;
				}
			}
		}
	}
	return %episodes;
}

sub prettyDump(%sitcoms) {
	my $nameLen     = [max] %sitcoms.keys>>.chars;
	my $maxEpisodes = [max] %sitcoms.values>>{'episodes'}>>.elems;
	my $maxDateLen  = 12; #[max] %sitcoms.values>>{'episodes'}>>.values>>.chars;
	my $num         = ($maxDateLen > $nameLen ?? $maxDateLen !! $nameLen);
	my $format      = '%s %02d %-' ~ $num ~ 's  ';

	my @names = %sitcoms.keys;
	my $headerFormat = '  %-' ~ 4+ $num ~ 's ';

	printf $headerFormat x @names.elems , |@names;
	say();
	for (1..$maxEpisodes) -> $i {
		for %sitcoms.keys -> $name {
			if defined %sitcoms{$name}{'episodes'}{$i} {
				my $isLast = %sitcoms{$name}{'ep'} == $i??'*'!!' ';
				my $entry  = %sitcoms{$name}{'episodes'}{$i};
				printf $format, $isLast, $i, $entry
			}
			else {
				print ' ' x $num+7;
			}
		}
		say();
	}
}

grammar Sitcom {
	rule TOP       { <sitcom> }

	proto rule sitcom             {*}
	      rule sitcom:sym<add>    { 'add' <name> <fileName> }
	      rule sitcom:sym<last>   { 'last' <name> <ep> }
	      rule sitcom:sym<list>   { 'list' }
	      rule sitcom:sym<report> { 'report' <name>? }

	token name     { [ \w | _ ]+ }
	token fileName { [ \w | _ | . ] + }
	token ep       { \d+ }
}

class SitcomActions {
	has Config $!config;

	submethod BUILD {
		$!config = Config.new;
		$!config.load;
	}

	method TOP($/)                { make $<sitcom>.made; }
	method sitcom:sym<add>($/)    { self.add(Str($<name>),Str($<fileName>)); }
	method sitcom:sym<last>($/)   { self.last(Str($<name>),Int($<ep>)); }
	method sitcom:sym<list>($/)   { self.list; }  
	method sitcom:sym<report>($/) { self.report($<name>); }

	method name($/) { defined($!config.sitcoms{$/})||exit; }

	method add(Str $name, Str $fileName) { 
		$!config.sitcoms{$name}{'episodes'} = parseFile($fileName);
	}

	method last(Str $name, Int $ep) { 
		$!config.sitcoms{$name}{'ep'} = $ep;
	}

	method list {
		say $!config.sitcoms.keys.join("\n");
	}

	method report($name?) {
		if defined($name)  {
			my %tmp = $name => $!config.sitcoms{$name};
			prettyDump %tmp;
		} else {
			prettyDump $!config.sitcoms;
		}
	}

	method epilog {
		$!config.save;
	}
}

my $sa = SitcomActions.new;
Sitcom.parse(@*ARGS.join(" "), actions => $sa).made;
$sa.epilog;

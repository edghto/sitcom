use v6;
use JSON::Tiny;

my $fileName = "supergirl.s02.dat";

say "ARGS: ", @*ARGS;

sub load {
	my %config = from-json(slurp ".config");
	return %config;
}

sub save(%config!) {
	my $fh = open ".config", :w;
	$fh.say(to-json(%config));
	$fh.close;
}
my %config = load;


sub parseFile($fileName!) {
	my %episodes;
	my @lines = (open $fileName).lines;
	while @lines {
		my $elem = @lines.shift;
		if $elem ~~ m/S(\d+)\,\s+Ep(\d+)/ {
			my $ep = $1;
			while @lines {
				$elem = @lines.shift;
				if $elem ~~ m/\d+ \s+ \w+\. \s+ \d\d\d\d/ {
					%episodes{$ep} = Str($/);
					last;
				}
			}
		}
	}
	return %episodes;
}

grammar Sitcom {
	rule TOP       { <sitcom> }

	proto rule sitcom             {*}
	      rule sitcom:sym<add>    { 'add' <name> <fileName> }
	      rule sitcom:sym<last>   { 'last' <name> <ep> }
	      rule sitcom:sym<list>   { 'list' }
	      rule sitcom:sym<report> { 'report' <name>? }

	token name     { [ \w | _ ]+ }
	token fileName { [ \w | _ | . ] + }
	token ep       { \d+ }
}

class SitcomActions {
	method TOP($/)                { make $<sitcom>.made; }
	method sitcom:sym<add>($/)    { self.add(Str($<name>),Str($<fileName>)); }
	method sitcom:sym<last>($/)   { self.last(Str($<name>),Int($<ep>)); }
	method sitcom:sym<list>($/)   { self.list; }  
	method sitcom:sym<report>($/) { self.report(Str($<name>)) }

	method add(Str $name, Str $fileName) { 
		%config{$name}{'episodes'} = parseFile($fileName);
	}

	method last(Str $name, Int $ep) { 
		%config{$name}{'ep'} = $ep;
	}

	method list {
		say %config.keys;
	}

	method report(Str $name?) {
		if defined($name)  {
			say %config{$name};
		} else {
			say %config;
		}
	}
}

say Sitcom.parse(@*ARGS.join(" "), actions => SitcomActions).made;

save(%config);

